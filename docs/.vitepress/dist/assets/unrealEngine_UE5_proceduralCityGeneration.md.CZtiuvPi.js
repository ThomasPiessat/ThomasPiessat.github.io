import{_ as a,c as t,o as n,ag as o}from"./chunks/framework.DRADY2L-.js";const i="/assets/Overview.CcogAXto.png",r="/assets/CityGeneration.DnSDt0TT.png",d="/assets/PCG_SplineCity.D1TCqppb.png",s="/assets/CityAlongsideRoad.CBZWuImI.png",l="/assets/RoadCity.DBnzodZr.png",f=JSON.parse('{"title":"Procedural City Generation","description":"","frontmatter":{},"headers":[],"relativePath":"unrealEngine/UE5/proceduralCityGeneration.md","filePath":"unrealEngine/UE5/proceduralCityGeneration.md","lastUpdated":null}'),h={name:"unrealEngine/UE5/proceduralCityGeneration.md"};function c(p,e,u,m,g,y){return n(),t("div",null,[...e[0]||(e[0]=[o('<h1 id="procedural-city-generation" tabindex="-1">Procedural City Generation <a class="header-anchor" href="#procedural-city-generation" aria-label="Permalink to &quot;Procedural City Generation&quot;">​</a></h1><img src="'+i+'" alt="Overview"><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>In this article, we will explore the runtime city generation based on a random-shaped spline and a city generated alongside a road.</p><h2 id="random-shaped-city-generation" tabindex="-1">Random-Shaped City Generation <a class="header-anchor" href="#random-shaped-city-generation" aria-label="Permalink to &quot;Random-Shaped City Generation&quot;">​</a></h2><p>This city is generated in a defined area. First of all we created spline points and make a loop with it. We want these spline points to be linear. Then we have our area where our city gonna be generated. We gonna create different size of building (tall, medium, small). We want to choose the density of buildings type we want, so we had a <em>DensityFilter</em> node. We also don&#39;t want our building to overlap between each other so we had a <em>SelfPruning</em> node. You can obviously add some mesh or scalable material to your building.</p><img src="'+r+'" alt="CityGeneration"><img src="'+d+'" alt="PCG_SplineCity"><h2 id="city-alongside-the-road-generation" tabindex="-1">City Alongside the Road Generation <a class="header-anchor" href="#city-alongside-the-road-generation" aria-label="Permalink to &quot;City Alongside the Road Generation&quot;">​</a></h2><p>We have building alongside the road. Our city spline need to know which spline it gonna follow, so we need to define the road as spline to follow. We will have to define the distance between the road and the buildings so for that we have 2 <em>TransformPoints</em> node, one for each side of the road. Then we merge our both side to have something symmetric. We add <em>ExtendModifier</em> node decrease or increase the distance between each building. And we want to have some nice meshes alongside this road. (Be carefull depending on the size of your mesh we will have to update transform point in order that your building mesh will not overlap).</p><img src="'+s+'" alt="CityAlongsideRoad"><img src="'+l+'" alt="RoadCity"><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h2><p>The goal is to create a city in a defined area and alongside the road and make sure that buildings form the city don&#39;t overlap between each other. Also in the city have different type and size of buildings. That can be done with PCG Graph that allow you to have multiple ways to choose the density, the size (height, width) of your city, avoiding overlap between all the buildings.</p>',14)])])}const b=a(h,[["render",c]]);export{f as __pageData,b as default};
