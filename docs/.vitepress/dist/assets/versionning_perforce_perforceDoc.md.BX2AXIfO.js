import{_ as o,c as t,o as r,ag as i}from"./chunks/framework.B8nQdxG0.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"versionning/perforce/perforceDoc.md","filePath":"versionning/perforce/perforceDoc.md","lastUpdated":1700504805000}'),n={name:"versionning/perforce/perforceDoc.md"};function s(c,e,a,p,d,f){return r(),t("div",null,[...e[0]||(e[0]=[i('<h2 id="p4enviro-vs-p4config" tabindex="-1">P4ENVIRO vs P4CONFIG <a class="header-anchor" href="#p4enviro-vs-p4config" aria-label="Permalink to &quot;P4ENVIRO vs P4CONFIG&quot;">​</a></h2><p>On Windows <code>p4 set</code> puts vars in the registry. It&#39;s also possible to store variables in a file and point to it using <code>P4ENVIRO</code> or <code>P4CONFIG</code></p><p>The only difference between the two is how files are found.<code>P4ENVIRO</code> requires a file in a specific location: <code>P4ENVIRO=F:\\path\\to\\file\\p4config.txt</code></p><p>WhileP4CONFIGwill search parent directories (starting from CWD) for the file: <code>P4CONFIG=p4config.txt</code></p><p>If your current working directory has no p4config.txt file then a p4 set on the CMD will return: <code>P4CONFIG=p4config.txt (set) (config &#39;noconfig&#39;)</code></p><p>Which can confuse some people into thinking they don’t have it properly setup. However, if you switch to a workspace folder where the current or parent directories have the p4config.txt file, it will pick up and display the proper settings.</p><p>In summary, <code>P4ENVIRO</code> is used for centralized management of settings across workspaces for one project at a time. With <code>P4CONFIG </code>you can have settings files across workspaces for multiple projects. This makes switching p4 vars between projects easier.</p>',7)])])}const g=o(n,[["render",s]]);export{h as __pageData,g as default};
