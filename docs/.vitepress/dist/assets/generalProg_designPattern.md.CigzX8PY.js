import{_ as e,c as a,o as r,ag as o}from"./chunks/framework.DRADY2L-.js";const p=JSON.parse('{"title":"Design Pattern","description":"","frontmatter":{},"headers":[],"relativePath":"generalProg/designPattern.md","filePath":"generalProg/designPattern.md","lastUpdated":1686567553000}'),n={name:"generalProg/designPattern.md"};function i(l,t,s,c,h,d){return r(),a("div",null,[...t[0]||(t[0]=[o('<h1 id="design-pattern" tabindex="-1">Design Pattern <a class="header-anchor" href="#design-pattern" aria-label="Permalink to &quot;Design Pattern&quot;">​</a></h1><h2 id="singleton-pattern" tabindex="-1">Singleton Pattern <a class="header-anchor" href="#singleton-pattern" aria-label="Permalink to &quot;Singleton Pattern&quot;">​</a></h2><ul><li>Ensures that only one instance of a class can exist and provides a global point of access to it.</li></ul><h2 id="factory-pattern" tabindex="-1">Factory Pattern <a class="header-anchor" href="#factory-pattern" aria-label="Permalink to &quot;Factory Pattern&quot;">​</a></h2><ul><li>Provides an interface for creating objects in a superclass, but allows subclasses to alter the type of objects that will be created.</li></ul><h2 id="abstract-factory-pattern" tabindex="-1">Abstract Factory Pattern <a class="header-anchor" href="#abstract-factory-pattern" aria-label="Permalink to &quot;Abstract Factory Pattern&quot;">​</a></h2><ul><li>Provides an interface for creating related objects, without specifying their concrete classes.</li></ul><h2 id="builder-pattern" tabindex="-1">Builder Pattern <a class="header-anchor" href="#builder-pattern" aria-label="Permalink to &quot;Builder Pattern&quot;">​</a></h2><ul><li>Allows objects to be created step-by-step, with the ability to skip or repeat certain steps, and to produce different variations of an object.</li></ul><h2 id="adapter-pattern" tabindex="-1">Adapter Pattern <a class="header-anchor" href="#adapter-pattern" aria-label="Permalink to &quot;Adapter Pattern&quot;">​</a></h2><ul><li>Allows objects with incompatible interfaces to work together by creating a wrapper object that translates between them.</li></ul><h2 id="decorator-pattern" tabindex="-1">Decorator Pattern <a class="header-anchor" href="#decorator-pattern" aria-label="Permalink to &quot;Decorator Pattern&quot;">​</a></h2><ul><li>Allows behavior to be added to an individual object, either statically or dynamically, without affecting the behavior of other objects from the same class.</li></ul><h2 id="observer-pattern" tabindex="-1">Observer Pattern <a class="header-anchor" href="#observer-pattern" aria-label="Permalink to &quot;Observer Pattern&quot;">​</a></h2><ul><li>Allows an object to maintain a list of its dependents and notify them automatically when it changes state.</li></ul><h2 id="strategy-pattern" tabindex="-1">Strategy Pattern <a class="header-anchor" href="#strategy-pattern" aria-label="Permalink to &quot;Strategy Pattern&quot;">​</a></h2><ul><li>Allows different algorithms to be selected dynamically at runtime, without changing the interface of the object that uses them.</li></ul><h2 id="template-method-pattern" tabindex="-1">Template Method Pattern <a class="header-anchor" href="#template-method-pattern" aria-label="Permalink to &quot;Template Method Pattern&quot;">​</a></h2><ul><li>Defines the skeleton of an algorithm in a superclass, but allows its subclasses to override certain steps of the algorithm without changing its structure.</li></ul><h2 id="composite-pattern" tabindex="-1">Composite Pattern <a class="header-anchor" href="#composite-pattern" aria-label="Permalink to &quot;Composite Pattern&quot;">​</a></h2><ul><li>Allows objects to be treated as a tree-like structure, with individual objects and groups of objects treated in the same way.</li></ul>',21)])])}const b=e(n,[["render",i]]);export{p as __pageData,b as default};
